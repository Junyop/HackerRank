QUESTION Solve Me First

Complete the function solveMeFirst to compute the sum of two integers.
Example
a = 7
b = 3
Return 10.

Function Description
Complete the solveMeFirst function in the editor below.
solveMeFirst has the following parameters:

* int a: the first value
* int b: the second value
Returns
- int: the sum of a and b

Constraints
1 <= a,b <= 1000

Sample Input
a = 2
b = 3

Sample Output
5

Explanation
2 + 3 =5.

----------------------------------------------------------------------------

SOLUTION with C#

using System;
using System.Collections.Generic;
using System.IO;

class Solution {

    static int solveMeFirst(int a, int b) { 
        return a + b;
    }

    static void Main(String[] args) {
        int val1 = Convert.ToInt32(Console.ReadLine());
        int val2 = Convert.ToInt32(Console.ReadLine());

        int sum = solveMeFirst(val1, val2);

        Console.WriteLine(sum);
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION Simple Array Sum
Given an array of integers, find the sum of its elements.

For example, if the array  ar= [1,2,3], 1+2+3=6, so return 6.

Function Description

Complete the simpleArraySum function in the editor below. It must return the sum of the array elements as an integer.

simpleArraySum has the following parameter(s):

ar: an array of integers
Input Format

The first line contains an integer, , denoting the size of the array.
The second line contains  space-separated integers representing the array's elements.

Constraints
0<n,ar[i]<=1000

Output Format
Print the sum of the array's elements as a single integer.

Sample Input
6
1 2 3 4 10 11

Sample Output
31

Explanation
We print the sum of the array's elements: 1+2+3+4+10+11=31.

----------------------------------------------------------------------------

SOLUTION with C#

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'simpleArraySum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY ar as parameter.
     */

    public static int simpleArraySum(List<int> ar)
    {
        return ar.Sum();
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int arCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> ar = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arTemp => Convert.ToInt32(arTemp)).ToList();

        int result = Result.simpleArraySum(ar);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION Compare the Triplets
Alice and Bob each created one problem for HackerRank. A reviewer rates the two challenges, awarding points on a scale from 1 to 100 for three categories: problem clarity, originality, and difficulty.

The rating for Alice's challenge is the triplet a = (a[0], a[1], a[2]), and the rating for Bob's challenge is the triplet b = (b[0], b[1], b[2]).

The task is to find their comparison points by comparing a[0] with b[0], a[1] with b[1], and a[2] with b[2].

If a[i] > b[i], then Alice is awarded 1 point.
If a[i] < b[i], then Bob is awarded 1 point.
If a[i] = b[i], then neither person receives a point.
Comparison points is the total points a person earned.

Given a and b, determine their respective comparison points.

Example

a = [1, 2, 3]
b = [3, 2, 1]

For elements *0*, Bob is awarded a point because a[0] .
For the equal elements a[1] and b[1], no points are earned.
Finally, for elements 2, a[2] > b[2] so Alice receives a point.
The return array is [1, 1] with Alice's score first and Bob's second.

Function Description

Complete the function compareTriplets in the editor below.

compareTriplets has the following parameter(s):

int a[3]: Alice's challenge rating
int b[3]: Bob's challenge rating

Return
int[2]: Alice's score is in the first position, and Bob's score is in the second.

Input Format

The first line contains 3 space-separated integers, a[0], a[1], and a[2], the respective values in triplet a.
The second line contains 3 space-separated integers, b[0], b[1], and b[2], the respective values in triplet b.

Constraints
1 ≤ a[i] ≤ 100
1 ≤ b[i] ≤ 100

Sample Input 0
5 6 7
3 6 10

Sample Output 0
1 1

Explanation 0
In this example:
a = (a[0],a[1],a[2]) = (5,6,7)
b = (b[0],b[1],b[2]) = (3,6,10)

Now, let's compare each individual score:

a[0] > b[0], so Alice receives 1 point.
a[1] = [b1], so nobody receives a point.
a[2] < b[2], so Bob receives 1 point.

Alice's comparison score is 1, and Bob's comparison score is 1. Thus, we return the array [1,1].

Sample Input 1
17 28 30
99 16 8

Sample Output 1
2 1

Explanation 1
Comparing the 0th elements, 17<99 so Bob receives a point.
Comparing the 1th and 2nd elements, 28>16 and 30>8 so Alice receives two points.
The return array is [2,1].

--------------------------------------------

SOLUTION

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System;

class Result
{
    /*
     * Complete the 'compareTriplets' function below.
     *
     * The function is expected to return a List<int>.
     * The function accepts two List<int> as parameters.
     */

    public static List<int> compareTriplets(List<int> a, List<int> b)
    {
        int aliceScore = 0;
        int bobScore = 0;

        for (int i = 0; i < a.Count; i++)
        {
            if (a[i] > b[i])
            {
                aliceScore++;
            }
            else if (a[i] < b[i])
            {
                bobScore++;
            }
        }

        return new List<int> { aliceScore, bobScore };
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        List<int> a = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(aTemp => Convert.ToInt32(aTemp)).ToList();

        List<int> b = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(bTemp => Convert.ToInt32(bTemp)).ToList();

        List<int> result = Result.compareTriplets(a, b);

        textWriter.WriteLine(String.Join(" ", result));

        textWriter.Flush();
        textWriter.Close();
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------
